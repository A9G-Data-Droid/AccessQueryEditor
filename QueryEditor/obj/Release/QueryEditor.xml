<?xml version="1.0"?>
<doc>
<assembly>
<name>
QueryEditor
</name>
</assembly>
<members>
<member name="T:QueryEditor.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.BinaryObject">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Copy">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Cut">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.DB">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Exec">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Find">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Folder">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.FunctionImg">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Open">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Paste">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Redo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Refresh">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Replace">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Replace1">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Save">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Tutorial">
<summary>
  Looks up a localized resource of type System.Byte[].
</summary>
</member>
<member name="P:QueryEditor.My.Resources.Resources.Undo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QueryEditor.DataBase.Query">
 <summary>Represents the Query we're working on</summary>
</member>
<member name="P:QueryEditor.DataBase.Tables">
 <summary>a list of all Tables Names in the calling instance</summary>
</member>
<member name="P:QueryEditor.DataBase.Queries">
 <summary>a list of all Queries Names in the calling instance</summary>
</member>
<member name="P:QueryEditor.DataBase.AllNames">
 <summary>
     a list of all Objects Names (Tables/Queries/Columns) in the calling instance
     this is gonna be used for faster DB Objects queries ,
     so it doesn't iterate Tables or Queries to get Columns Names
 </summary>
</member>
<member name="P:QueryEditor.DataBase.GetAutoComplete(System.String)">
 <summary>
     gets a list of DB Objects Autocomplete words for a given word
 </summary>
 <param name="word">the words to search for Autocomplete</param>
</member>
<member name="M:QueryEditor.DataBase.#ctor(System.String,System.String)">
 <summary>
     Class Constructor.
 </summary>
 <param name="dbPath">Path to Database File.</param>
 <param name="dbPassword">Password to that database.</param>
</member>
<member name="M:QueryEditor.DataBase.Populate">
 <summary>
     fills the instance members with the info from the source
 </summary>
 <remarks></remarks>
</member>
<member name="M:QueryEditor.DataBase.GetQueries">
 <summary>
     A list of Queries in the calling instance (returned as DataTable Type)
 </summary>
</member>
<member name="M:QueryEditor.DataBase.GetTables">
 <summary> a list of Tables in the calling instance (returned as DataTable Type)</summary>
</member>
<member name="M:QueryEditor.DataBase.RefreshSchema">
 <summary>
     re-fill instance members with a Info from the source
 </summary>
</member>
<member name="M:QueryEditor.DataBase.ExecuteSqlCommand(QueryEditor.Queries.SqlQuery)">
 <summary>Executes a given sql statement and returns the count of the affected records</summary>
 <param name="commandQuery">the SqlQuery statement to execute</param>
 <returns>count of the affected records</returns>
</member>
<member name="M:QueryEditor.DataBase.GetDataTable(QueryEditor.Queries.SqlQuery,System.String)">
 <summary>Returns a DataTable instance that holds the returned data of a specified Sql statement</summary>
 <param name="thisQuery">SqlQuery statement to execute</param>
 <param name="tableName">a value to be set to the name of the returned table</param>
</member>
<member name="M:QueryEditor.DataBase.GetDataTableSchema(System.String)">
 <summary>Returns a DataTable instance that holds no data, it has only the schema of the specified exised Table Name</summary>
 <param name="tableName">the name of the table to return the schema of</param>
</member>
<member name="T:QueryEditor.ExportData">
 <summary>Contains different manners to export a DataTable to an Excel Sheet</summary>
</member>
<member name="M:QueryEditor.ExportData.ExportByExcel(System.String,System.Data.DataTable)">
 <summary>
     Exports a DataTable to an Excel Sheet using the Excel Application itself
 </summary>
 <param name="fileName">the destination file</param>
 <param name="exportDataTable">the data to export</param>
</member>
<member name="M:QueryEditor.ExportData.ExportByHtml(System.String,System.Data.DataTable)">
 <summary>
     Exports a DataTable to HTML
 </summary>
 <param name="fileName">the destination file</param>
 <param name="dt">the data to export</param>
</member>
<member name="M:QueryEditor.ExportData.ExportByXml(System.String,System.Data.DataTable)">
 <summary>
     exports a DataTable to an Excel Sheet using "XML SpreadSheet" formating
     to create an Excel-Distinguished formatted file
 </summary>
 <param name="fileName">the destination file</param>
 <param name="dt">the data to export</param>
</member>
<member name="F:QueryEditor.FindReplace.Opened">
 <summary>used to determine if there is more than one instance of this Form-class opened</summary>
</member>
<member name="F:QueryEditor.FindReplace._founds">
 <summary> holds the found matches of the search </summary>
</member>
<member name="F:QueryEditor.FindReplace._findPos">
 <summary>holds the navigation pos in found matches</summary>
</member>
<member name="F:QueryEditor.FindReplace._reFind">
 <summary>turns true if user changes one/more of find elements</summary>
</member>
<member name="F:QueryEditor.FindReplace._forcedHeight">
 <summary>
     user can't change the Height , But I can ,
     so this is used to set the height that user has to stick with
 </summary>
</member>
<member name="F:QueryEditor.FindReplace._heightChangeable">
 <summary>
     user can't change the Height , But I can ,
     this is var toggles to determine who's changing the height now
 </summary>
</member>
<member name="F:QueryEditor.FindReplace.SpaceBetweenTools">
 <summary>
     this var is used when we perform some movements ,
     it's used in more than place,
     so we made it as a public to be able to change it
     without affecting codes that use it
 </summary>
 <remarks></remarks>
</member>
<member name="M:QueryEditor.FindReplace.#ctor(QueryEditor.ColoringWords.DevRichTextBox)">
 <summary>
     creates a new instance of the Form-class
 </summary>
 <param name="targetRichTextBox">just a pointer to the RichTextBox that will be searched </param>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox._toolInternalChanging">
 <summary>
     in some certain stances we need to change (Internally) the Text property of the tool,
     but changing the text will affect other actions
     (like Undo and Redo ability) that are not Internal
     so this variable will determine whether the current "Text-Changing Operation" is Internal or not
 </summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox._needColorAll">
 <summary>
     in some certain stances we need to Recolor all the text in the tool,
     so this is the variable that determine whether to color the CurrentWord or all text
 </summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox._startedColoring">
 <summary>
     RecolorWord Sub will change the Selection many times ....,
     but Changing Selection will Raise OnTextChanged Event which in turn Calls RecolorWord Sub ,
     even Changing the Font will Raise OnTextChanged Event ,......
     thus we'll have a Recursive Calls ,....
     so we use this var to tell the RecolorWord Sub not to Start Coloring again cuz it's already coloring
 </summary>
</member>
<member name="T:QueryEditor.ColoringWords.DevRichTextBox.UndoObject">
 <summary>
     The original Undo , Redo .....of the tool affect all actions
     even Font Properties and selecton Properties,
     so we have to make something instead
     so this is a class to perform the Redo ,Undo
 </summary>
</member>
<member name="T:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.UndoState">
 <summary>
     Redo,Unndo is stored a Pair of info
     (the text it was, and the Caret position it was)
     and this is a Structure to hold this info for each State
 </summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.Capcity">
 <summary> the count of Redo operations available </summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox.UndoObject._undoList">
 <summary> the variable that holds the States informations</summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox.UndoObject._currentIndex">
 <summary>
     holds the current position of the Redo-Undo operations
     when a new state is added to the end of Redo-Undo list it turns
     to pre-last state (the one that is before the last one)
 </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.Add(System.String,System.Int32)">
 <summary>
     adds a new Redo-Undo state at the end of the Redo-Undo list
     it removes the first one if the list becoms longer than the capcity
 </summary>
 <param name="stateText">the text of the added state</param>
 <param name="stateCaret">the caret positions of the added state</param>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.GetPrev">
 <summary>gets the previous State of the text to perform an Undo operation </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.CanUndo">
 <summary>gets a value indicating whether the tool can perform an Undo operation</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.GetNext">
 <summary>gets the Next State of the text to perform a Redo operation </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.CanRedo">
 <summary>gets a value indicating whether the tool can perform a Redo operation</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.UndoObject.ClearList">
 <summary>clears the history of the Undo-Redo operations</summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox._undoList">
 <summary>the list of the Redo-Undo available States to perform the Redo-Undo Operations</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.ClearUndoRedo">
 <summary>clears the history of the Undo-Redo operations</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.Clear">
 <summary>
     clears the text on the tool and clears the history of the Undo-Redo operations
 </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.CanUndo">
<summary>gets a value indicating whether the tool can perform an Undo operation</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.Undo">
 <summary>performs an Undo operation</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.CanRedo">
 <summary>gets a value indicating whether the tool can perform a Redo operation</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.Redo">
<summary>performs a Redo operation</summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox.__autoComplete">
 <summary>the ListBox that shows up when user asks for AutoComplete</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.LockWindowUpdate(System.Int32)">
 <summary>
     this will disables drawing in some control (whose Handle is passed as a param)
     so working with it will be faster (while no need to see the drawing things)
 </summary>
 <param name="hWnd">the handle of the control to disables drawing in</param>
</member>
<member name="E:QueryEditor.ColoringWords.DevRichTextBox.OverTypeChanged">
 <summary>
     occurs when the Insert Keyboard button is pressed telling to change the INS\OVR state is changed
 </summary>
 <param name="sender">the caller object</param>
 <param name="overTypeState">the new state of INS\OVR state</param>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.FileName">
 <summary>full name of the file that the current text in the control belongs to </summary>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.GetLastCharIndexOfCurrentLine">
<summary>Retrieves the Index of the last character in current Line</summary>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.CurrColNumber">
<summary>the current horizontal location of the Caret in the current Line</summary>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.CurrLineNumber">
 <summary>the current Vertical location of the Caret</summary>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.PreviousSpace(System.Int32)">
 <summary>
     returns the last presence of any of non-word characters (; , ' \ ] [......etc) starting from the current position
     of the caret
 </summary>
 <param name="starting">
     the place to start searching ,
     if it's dropped or has a value of -1 then searching will start from the Caret position
 </param>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.NextSpace(System.Int32)">
 <summary>
     returns the Next presence of any of non-word characters (; , ' \ ] [......etc) starting from the current position
     of the caret
 </summary>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.PrevWord">
 <summary>
     returns the previous word in the text starting from the current position of the caret,
     the word is returned without the separator (which separates it from the other words)
 </summary>
</member>
<member name="F:QueryEditor.ColoringWords.DevRichTextBox._baseText">
 <summary>
     The text that the property TextModified is set to True
     if the text in the tool is different from
 </summary>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.TextModified">
 <summary>
     the already defined Property "Modified" changes to True when the text format is changed
     (size , font , color ...) ,...
     and being we want to save it as a plain text at the end ,
     we can't count on the already defined Property "Modified" ,
     so we had to define our own Property that turns to True only when
     the plain text is changed
 </summary>
</member>
<member name="P:QueryEditor.ColoringWords.DevRichTextBox.OverType">
 <summary>a value indicating the current state of the INS/OVR state of the this tool</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.ColorCurrentWord(System.Object,System.Boolean)">
 <summary>
     this is the sub that is responsible for coloring words
 </summary>
 <param name="sender">a value to indicate the caller of this function </param>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.RecolorWords(System.String)">
 <summary> colors all words in the tool </summary>
 <param name="sender">the caller that calls this sub</param>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.DisableDrawing">
 <summary>
     Disables Drawing processes , so dealing with the tool internally becomes faster
     when drawings are not really a big deal
 </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.EnableDrawing">
 <summary>re-Enables Drawing processes after calling DisableDrawing</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.ColorSection(System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
 <summary>
     this function will color some section of the text in the control
     with a specified color
 </summary>
 <param name="coloringStart">location to start coloring from</param>
 <param name="coloringLen">location to end coloring with</param>
 <param name="useDisableDrawing">
     coloring use internally selection ....,
     so if you wana hide selection while coloring set this param to True otherwise to False,
     But,if you're gonna call this sub several times in one sub routine
     it's better for performance to call the DisableDrawing() before and EnableDrawing() yourself
     and set this param to False each time you call it.
 </param>
 <remarks></remarks>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.SaveAs">
 <summary>this will ask for a new FileName and then Call the Save sub rutine</summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.Save">
 <summary>
     this will save the text to the pre specified FileName
     or call SaveAs sub rutine if it's not specified yet
 </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.OpenNewFile">
 <summary>
     asks user to supply a file (text file) path by showing an OpenFileDialog ,
     and shows it's contents
 </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.Ask4Save(Microsoft.VisualBasic.MsgBoxStyle)">
 <summary> shows a message dialog to ask user if he/she wants to save the current text </summary>
 <returns>returns what user selected a Yes or a No</returns>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.Paste">
 <summary>
     Pastes the contents of the Clipboard into the tool
 </summary>
</member>
<member name="M:QueryEditor.ColoringWords.DevRichTextBox.Cut">
 <summary>
     Moves the current selection in the Tool to the Clipboard
 </summary>
</member>
<member name="F:QueryEditor.DevTreeView._lastUsedNode">
 <summary>
     this will be used with context menu that deals with each nodes
     when it opens (the context menu I mean) which node will be affected ?......
     this field will determine this node......
     and its value will be set by several events of the TreeView
 </summary>
</member>
<member name="P:QueryEditor.DevTreeView.LastUsedNode">
 <summary>
     this will be used with context menu that deals with each nodes
     when it opens (the context menu I mean) which node will be affected ?......
     this Property will determine this node......
 </summary>
</member>
<member name="M:QueryEditor.DevTreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)">
 <summary>
     Sets the last node on check
 </summary>
 <param name="e">The event</param>
</member>
<member name="M:QueryEditor.DevTreeView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
 <summary>
     Sets the last node on click.
 </summary>
 <param name="e">Click event</param>
</member>
<member name="M:QueryEditor.Editor.SetConStr(System.String)">
 <summary>
     to do some things that not related to the db layer
 </summary>
 <param name="dataBaseName">the database name to connect to</param>
</member>
<member name="F:QueryEditor.Editor._textIcon">
 <summary>
     I MADE THESE PRIVATE.
     OLD COMMENT:
     one of the variables that holds an Index in the "ImageList" of the "TrView_dbObjects"
     in the main form ....  Input them as Public variables
     so I can change their values without affecting codes that use them
 </summary>
</member>
<member name="P:QueryEditor.Queries.SqlQuery.Sql(System.Boolean)">
 <summary> Get or Sets the sql statement text </summary>
 <param name="commented">determine if the returned value will be with comments or not</param>
</member>
<member name="P:QueryEditor.Queries.SqlQuery.QueryType">
 <summary>
     Gets a value indicating the type of the SQL statement.
     it returns one of the following values :
     a ( SELECT ) statement or a ( NonQuery ) Statement
     or a( Parameterized SELECT ) Statement or a ( Parameterized NonQuery ) Statement.
 </summary>
</member>
<member name="F:QueryEditor.Queries.SqlQuery._queryParams">
 <summary>the internal object of the property QueryParams</summary>
</member>
<member name="P:QueryEditor.Queries.SqlQuery.QueryParams">
 <summary>Gets or Sets the query parameters that will be used for Parameterized queries</summary>
</member>
<member name="M:QueryEditor.Queries.SqlQuery.GetParamsAutoCompleteList(System.String)">
 <summary>
     gets a list of the available parameters that start with a given word
 </summary>
 <param name="word">the word to get a [Parameters Auto Complete list] for</param>
</member>
<member name="F:QueryEditor.DevDataGridView._indexOnRowHeader">
 <summary>
     the internal value of the IndexOnRowHeader Property,
     and it's set to true as an initialization
 </summary>
</member>
<member name="P:QueryEditor.DevDataGridView.IndexOnRowHeader">
 <summary>Indicates whether each row has a header of its index(starts by 1) or not</summary>
</member>
<member name="M:QueryEditor.DevDataGridView.GetRowHeaderText(System.Int32)">
 <summary>
     The header of a row could be Set from different places,
     so I made it in a Function to uniform the operations that are done to get it
 </summary>
 <param name="rowIndex">Index of the row whose header you're asking for</param>
</member>
<member name="P:QueryEditor.DevDataGridView.NewFeatures">
 <summary>
     Gives a little tip about why this control is made for
 </summary>
</member>
<member name="E:QueryEditor.DevDataGridView.RowsCountChanged">
 <summary>Occurs when the rows count of the calling instance is changed</summary>
</member>
<member name="M:QueryEditor.DevDataGridView.OnRowsCountChanged">
 <summary>raises RowsCountChanged events in the needed time</summary>
</member>
</members>
</doc>
